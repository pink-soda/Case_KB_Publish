邮件主题：回复: 回复: 回复: 【外来邮件，注意核实】[案例号: CAS-04223-R4W0Q7 ] % |P2|ICBC|V0-H升级失败，需要分析TMS哪个进程阻止系统升级 % 初次响应 CMIT:0001765

====第1封邮件====

发件人：Jia Wei
发送时间：2021-05-24 10:25:36.863000+00:00
邮件内容:
吴先生, 您好!
问题定义: 反馈V0-H升级失败问题，用户发来的报错截图是已知问题，需要CMIT收集日志分析阻止了系统升级的原因。
问题范围: 我们将协助您分析处理上述问题，并对定义的问题给予最大的技术支持。
如果能及时解决问题，或问题属于产品设计的行为，或问题涉及到三方，我们将考虑关闭案例。如果存在多个问题，则我们考虑拆分案例进行分析。
接下来，我们将开始合作解决这个问题。如果您对以上的问题范围界定有任何异议，请尽快告知。如果您有其他任何疑问。也欢迎随时与我联系。
日志收集：
一、工具收集
1）首先，进行系统升级操作，复现问题现象（报错出现）
2）回到桌面，下载附件CMGELogCollector_ICBC.zip文件并解压到本地磁盘，双击运行exe文件，同意后，按照下图勾选，额外勾选“升级日志”，点击收集。 
3）收集完毕后将在当前用户桌面生产CMGE_Log。点击确定，将直接打开文件夹并定为压缩文件。 
3）将压缩文件上传。 
您可以登陆https://cduc.cmgos.com <https://cduc.cmgos.com/> ，通过数据上传系统上传您所收集的日志信息 
用户名：ICBC001
--------------

====第2封邮件====

发件人：朱卫艳
发送时间：2021-05-24 16:08:36.333000+00:00
邮件内容:
你好，日志已发，文件名为“1_全部附件.zip”,谢谢支持！ 

====第3封邮件====

发件人：Jia Wei
发送时间：2021-05-24 16:55:21.784000+00:00
邮件内容:
朱女士，您好
非常感谢您的邮件回复。
我这里没有看到您上传的日志文件。在文件系统上传完毕之后，还需要再点击“保存”选项。您确认操作是否成功。
--------------

====第4封邮件====

发件人：Jia Wei
发送时间：2021-05-24 17:42:14.611000+00:00
邮件内容:
朱女士&吴先生，您好
刚刚简单看了一下日志文件，这台计算机是Windows 7 专业版系统。目前升级V2020-L系统不支持从Windows 7升级，只支持从V0-H版本进行升级操作。
请问是不是收错了？
--------------

====第5封邮件====

发件人：朱卫艳
发送时间：2021-05-25 13:32:55.875000+00:00
邮件内容:
你好， 我们取的日志非常大，邮件发不出来 能帮忙过滤下有用文件？ 

====第6封邮件====

发件人：朱卫艳
发送时间：2021-05-25 13:57:45.800000+00:00
邮件内容:
您好， 最新的日志已发，共两份，一份是蓝屏和断网的， 一份是升级失败的，文件名里有明示。请查收，谢谢！ 
---------     
    此邮件信息仅供收件人查阅，所含任何评论、陈述或数据仅供收件人参考，若有改动，恕可能不另行通知。未经中国工商银行书面许可，请勿披露、复制、转载此邮件信息。任何第三方均不得查阅或使用此邮件信息。若您误收到本邮件，敬请及时通知
====第7封邮件====

发件人：Jia Wei
发送时间：2021-05-25 14:00:42.206000+00:00
邮件内容:
朱女士，您好
目前没看到您上传的日志文件。请再次确认是否已经上传并保存。
--------------

====第8封邮件====

发件人：朱卫艳
发送时间：2021-05-25 14:32:52.322000+00:00
邮件内容:
又上传了一下， 名字中写了备注的。 

====第9封邮件====

发件人：Jia Wei
发送时间：2021-05-26 16:25:03.432000+00:00
邮件内容:
吴先生，您好
案例分析：
目前上报的案例截图中的报错信息为：0xc1900101 – 0x40017，此问题现象与客户回传的《20210525_091606升级失败》日志出现的升级失败问题现象不一致。
*  当前处理的案例：0xc1900101 – 0x40017为second boot阶段失败回滚。
*  《20210525_091606升级失败》日志对应为downlevel阶段升级中断。
一、如果需要处理报错：0xc1900101 – 0x40017升级失败的问题，需要
1）在出现此问题的计算机上复现问题，并按照2021-05-24 10:30的邮件内容进行日志收集。
2）手动收集如下信息(不存在的就跳过)：
C:\Windows\Panther  整个文件夹，之前的升级日志(包含回滚)
C:\Windows.~BT\Sources\Panther   整个文件夹，本次升级日志
C:\Windows.~BT\Sources\Rollback  整个文件夹，本次回滚日志
C:\Windows\System32\winevt\Logs  整个文件夹
C:\Windows\Inf\Setupapi*.log -----> driver日志
Msinfo32:
以管理员身份运行命令提示符，运行如下命令，等待运行完毕后拷贝C:\SYSSUM.NFO文件
msinfo32 /nfo C:\SYSSUM.NFO /categories +systemsummary
将上述文件/文件夹压缩后上传
二、如需继续处理《20210525_091606升级失败》问题，还需要进行如下步骤：
1）新创建基于此问题的案例。
2）抓取Procmon日志。
方法：在升级失败的计算机上进行如下操作：
a）请下载并解压附件<ProcessMonitor.zip>；
b）双击Procmon.exe运行，到达此页面，会有有大量条目出现，先后点击1，2暂停抓取并清除当前条目。当前已经是可抓取状态；
c）准备好复现条件，点击下图的图标开始抓取。复现问题（此案例为升级操作系统直至失败），记录时间点（对于案例分析极为重要。例如出现弹框报错的时间点），出现问题现象后。回到Process Monitor窗口，单击Capture，停止抓取；
d）点击File, 点击Save. 选择"All events" and "Native Process Monitor Format (PML)"点击OK。记录文件保存位置； 
e）将PML文件重命名、打包压缩，并邮件反馈问题出现的时间点。
建议尝试：
《20210525_091606升级失败》日志中显示进程意外退出。由于目前不清楚此问题的问题现象，根据以往经验如果是闪退问题，建议检查
1）TMS策略是否对Tiworker进程有所限制。建议尝试脱管后升级。
2）如果TMS托管后升级仍失败，建议暂时关闭DSP。
2021-05-25 09:15:38, Info                  DIAGER CWfpER::SetHeader:Setting header=Microsoft Windows Installation encountered a problem and needs to close. We are sorry for the inconvenience
2021-05-25 09:15:38, Info                         CDiagnosticsHelper::GetWatsonFilesToAttach: Attaching file C:\$WINDOWS.~BT\Sources\Panther\SetupAct.log
2021-05-25 09:15:38, Info                         CDiagnosticsHelper::GetWatsonFilesToAttach: Attaching file C:\$WINDOWS.~BT\Sources\Panther\diagerr.xml
2021-05-25 09:15:38, Info                  DIAGER DiagERAddFiles:Entry
2021-05-25 09:15:38, Info                  DIAGER CWfpER::AddFiles:Entry
2021-05-25 09:15:38, Info                  DIAGER IDiagER::AddFiles:Entry
2021-05-25 09:15:38, Info                  DIAGER CWfpER::AddFiles:Adding file=C:\$WINDOWS.~BT\Sources\Panther\SetupAct.log
2021-05-25 09:15:38, Info                  DIAGER CWfpER::AddFiles:Adding file=C:\$WINDOWS.~BT\Sources\Panther\diagerr.xml
2021-05-25 09:15:38, Info                  DIAGER DiagERSubmitEx:Entry
2021-05-25 09:15:38, Info                  DIAGER CWfpER::Submit:Entry
2021-05-25 09:15:38, Info                  DIAGER Watson Error Report submitted and Result=5
2021-05-25 09:15:38, Info                  DIAGER DiagERTerminate:Entry
2021-05-25 09:15:38, Info                  DIAGER CWfpER::~CWfpER:Entry
2021-05-25 09:15:38, Info                  DIAGER Consent Value = HKCU\Software\Microsoft\Windows\Windows Error Reporting\Consent!WinSetupDiag02 has been cleaned out
2021-05-25 09:15:38, Info                  DIAGER IDiagER::~IDiagER:Entry
2021-05-25 09:15:39, Warning    [0x08094f] MIG    MigHost: CMigPluginSurrogate::WaitForHostTermination: Parent process unexpectedly exited. Terminating host.
2021-05-25 09:15:39, Info                  MIG    MigHost: CMigPluginSurrogate::COMGenericThreadingHostThreadProc: Exiting ThreadID=[0x560].
您可以登陆https://cduc.cmgos.com <https://cduc.cmgos.com/> ，通过数据上传系统上传您所收集的日志信息 
用户名：ICBC001
--------------

====第10封邮件====

发件人：朱卫艳
发送时间：2021-05-26 16:52:20.261000+00:00
邮件内容:
您好， 看了您的邮件，感觉这样诊断问效率太低， 方便派人来上研支持吗?这样反复操作耗费的精力相当大，效果还不好。 派人直接来诊断一下？ 
---------     
    此邮件信息仅供收件人查阅，所含任何评论、陈述或数据仅供收件人参考，若有改动，恕可能不另行通知。未经中国工商银行书面许可，请勿披露、复制、转载此邮件信息。任何第三方均不得查阅或使用此邮件信息。若您误收到本邮件，敬请及时通知
====第11封邮件====

发件人：Jia Wei
发送时间：2021-05-28 11:22:12.234000+00:00
邮件内容:
朱女士，您好
我已经与吴先生进行多次沟通，等待日志文件上传后我会继续跟踪处理这2个升级问题。
--------------

====第12封邮件====

发件人：朱卫艳
发送时间：2021-05-28 11:55:52.262000+00:00
邮件内容:
步骤太复杂，耗时长， 且要沟通几次不确定，希望能现场支持， 谢谢！ 

====第13封邮件====

发件人：Jia Wei
发送时间：2021-05-28 14:55:10.432000+00:00
邮件内容:
朱女士，您好
刚刚很高兴与您电话沟通，根据沟通的结果，后续会有工程师联系您，并完成相应的日志收集操作。如果您还有其他疑问可回复此邮件，我们很愿意为您解答。
--------------

====第14封邮件====

发件人：Jia Wei
发送时间：2021-05-28 17:29:29.107000+00:00
邮件内容:
吴先生，您好
收到。
--------------

====第15封邮件====

发件人：Liu Jian
发送时间：2021-05-28 17:49:03.609000+00:00
邮件内容:
Hi 李总
根据与工行北京分行沟通，预计下周二去现场收取日志分析问题，现需要提供如下信息提前办理入场手续，谢谢
工程师姓名：
身份证号：
手机号：
健康码和行程卡截图：
Thank you for your time!
----------
Best Regards,
Carl Liu（刘健）
Mobile: + 86 13810968329 | Email: liujian@cmgos.com

====第16封邮件====

发件人：Jia Wei
发送时间：2021-05-28 17:56:24.468000+00:00
邮件内容:
Hi Liu Jian,
工程师姓名：贾伟
身份证号：110101198809222518
手机号：13693172002
健康码和行程卡截图：见附件所示。
--------------

====第17封邮件====

发件人：Jia Wei
发送时间：2021-05-28 18:12:11.188000+00:00
邮件内容:
朱女士，您好
目前此问题由北京分行提供环境进行分析，后续如果有进展会第一时间与您沟通。谢谢。
--------------

====第18封邮件====

发件人：Jia Wei
发送时间：2021-05-31 09:25:55.404000+00:00
邮件内容:
吴先生，您好
关于您的问题，且根据日志分析目前问题出现在Windows Upgrade的第一阶段（downlevel），此阶段涉及的进程信息如下：
*  Setup.exe 升级主进程
*  SetupPrep.exe 前置准备进程(做一些兼容性检查)
*  SetupHost.exe 主要负责downlevel阶段的升级的具体动作
上述三个进程是父子关系进程：
SetupHost.exe在downlevel操作阶段还会用到以下的进程：
*  dismhost.exe (DISM)
*  mighost.exe (做一些迁移的动作，会调用Conhost.exe)
关系如下：
另外还有
*  TrustInstaller.exe
*  Tiworker.exe
根据当前仅有的日志判断，建议三方软件方面从SetupHost.exe这一级的进程入手，但具体的原因还是要结合Process Monitor Log来进行定位。
--------------

====第19封邮件====

发件人：Jia Wei
发送时间：2021-06-01 16:07:04.437000+00:00
邮件内容:
吴先生, 您好!
很高兴与您电话沟通，根据沟通的结果，我将暂时归档此问题。案例归档后您会收到调查问卷的邮件，希望可以对我们的服务进行评价。
工单的归档并不会影响我们为您提供技术支持服务，如果您的问题复现，或有新的问题出现，您也可以致电我们的技术支持热线4008180055。
案例总结：
案例描述：
系统升级失败。升级V2020-L过程中出现回退以及0xc1900101 – 0x40017报错。
案例分析及进展：
ICBC北分现场技术支持总结：
现场有两台可以分别复现第一阶段和第四阶段错误的机器。
1）机器A在升级第四阶段蓝屏，回滚后报0xc1900101 – 0x40017错误。卸载TMS之后，问题不再复现，可以正常升级。
2）机器B在第一阶段出现升级界面闪退问题，伴随DSP报错信息出现（vUserHCI.exe）。此系统经确认没有安装最新DSP。升级新版DSP后问题不再复现，但出现升级过程第四阶段回滚并报错0xc1900101 – 0x40017。与机器A问题相同。保留机器B作为可以复现的机器没有卸载TMS。
已与吴毓杰先生沟通并已提供升级过程中的调用的系统进程列表，将与TMS研讨解决方案。可以暂时挂起案例。
--------------

====第20封邮件====

发件人：Jia Wei
发送时间：2021-06-02 17:05:25.885000+00:00
邮件内容:
吴先生, 您好!
基于刚刚的电话沟通，建议从tms不同版本的角度出发进行对比测试。
关于wpdmtp.dll问题出现在之前上报的安装Windows更新失败的案例中，从问题现象上来看，与此次系统升级第四阶段失败有关联的可能性比较低。
--------------

====第21封邮件====

发件人：Jia Wei
发送时间：2021-06-11 09:20:02.050000+00:00
邮件内容:
吴先生，您好
升级过程中蓝屏Dump分析：
分析结论：
*   蓝屏原因：蓝屏当时对应线程的动作是OS启动过程中正在初始化并加载Driver。而在OS启动加载driver的过程中，lwfmgr.sys驱动调用ndis!NdisFDeregisterFilterDriver访问了一个无效的地址导致蓝屏。
*   NdisFDeregisterFilterDriver函数的目的是去释放filter driver之前调用NdisFRegisterFilterDriver <https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/ndis/nf-ndis-ndisfregisterfilterdriver> 分配的资源。
分析细节：
Crashing Stack
============================================
Process                   Thread           CID       UserTime KernelTime ContextSwitches Wait Reason Time State
System (ffffdd0d39aa9300) ffffdd0d39aec400 4.8             0s     1s.563            2218 Executive     0s Running on CPU 0
# Child-SP         Return           Call Site              Info                         Source
0 ffffa88ce70062d8 fffff8052028599e nt!KeBugCheckEx+0x0
1 (Inline)         - nt!PspUnhandledExceptionInSystemThread+0x27
2 ffffa88ce70062e0 fffff8052024762f nt!PspSystemThreadStartup$filt$0+0x44
3 ffffa88ce7006320 fffff8052027611f nt!__C_specific_handler+0x9f
4 ffffa88ce7006390 fffff805201171d0 nt!RtlpExecuteHandlerForException+0xf
5 ffffa88ce70063c0 fffff805201b68b4 nt!RtlDispatchException+0x430
6 ffffa88ce7006b10 fffff8052027eec2 nt!KiDispatchException+0x144
7 ffffa88ce70071c0 fffff8052027b1ae nt!KiExceptionDispatch+0xc2
8 ffffa88ce70073a0 fffff8053606a2b7 nt!KiPageFault+0x42e
9 ffffa88ce7007530 fffff80521915167 ndis!NdisFDeregisterFilterDriver+0x47
a ffffa88ce7007570 fffff8052191b49a lwfmgr+0x5167  
 b ffffa88ce70075a0 fffff805206fca55 lwfmgr+0xb49a  
 c ffffa88ce7007830 fffff80520a63908 nt!IopLoadDriver+0x4bd
d ffffa88ce7007a10 fffff80520a87f2a nt!IopInitializeSystemDrivers+0x134    >>> OS启动过程中正在初始化并加载Driver
e ffffa88ce7007ab0 fffff805207f0702 nt!IoInitSystem+0x12
f ffffa88ce7007ae0 fffff805201cfd65 nt!Phase1Initialization+0x42
10 ffffa88ce7007b10 fffff80520274a8c nt!PspSystemThreadStartup+0x55
11 ffffa88ce7007b60 0000000000000000 nt!KiStartSystemThread+0x1c
This thread is crashing
查看第9帧，可以看出蓝屏的直接原因是ndis的function NdisFDeregisterFilterDriver 到[rbx+158h]这个内存地址获取数据的时候，发现这个内存地址是个无效的内存地址，从而触发了内存违规访问导致了蓝屏。
.frame /r 0x9; !mex.x
09 ffffa88c`e7007530 fffff805`21915167     ndis!NdisFDeregisterFilterDriver+0x47 [minio\ndis\sys\lwfilter.c @ 449] 
rax=0000000000000000 rbx=0000000000000000 rcx=fffff8051e70e180
rdx=0000000000000000 rsi=0000000000000000 rdi=ffffdd0d3b8c88f0
rip=fffff8053606a2b7 rsp=ffffa88ce7007530 rbp=ffffa88ce7007930
r8=0000000000000000  r9=0000000000000000 r10=fffff80520121b70
r11=ffffa88ce70074d0 r12=ffffffff80000358 r13=0000000000000002
r14=ffff868dc80c8670 r15=ffffdd0d3bbf5000
iopl=0         nv up ei ng nz na pe nc
cs=0010  ss=0018  ds=002b  es=002b  fs=0053  gs=002b             efl=00000282
ndis!NdisFDeregisterFilterDriver+0x47:
fffff805`3606a2b7 488b8b58010000  mov     rcx,qword ptr [rbx+158h] ds:002b:00000000`00000158=????????????????
@rbx              NdisFilterDriverHandle = 0x00000000`00000000
分析根本原因，就要看NdisFDeregisterFilterDriver为什么会去这个无效地址[rbx+158h]拿数据；通过查看入参，查看rbx的地址，其实是lwfmgr.sys这个driver <mailto:发现@rbx的地址，其实是lwfmgr.sys这个driver> 传给ndis!NdisFDeregisterFilterDriver的：
09 ffffa88c`e7007530 fffff805`21915167     ndis!NdisFDeregisterFilterDriver(void * NdisFilterDriverHandle = 0x00000000`00000000)+0x47
0a ffffa88c`e7007570 fffff805`2191b49a     lwfmgr+0x5167
0b ffffa88c`e70075a0 fffff805`206fca55     lwfmgr+0xb49a
0c ffffa88c`e7007830 fffff805`20a63908     nt!IopLoadDriver(void * KeyHandle = 0xffffffff`80000358, unsigned char CheckForSafeBoot = 0x01 '', unsigned char IsFilter = <Value unavailable error>, long * DriverEntryStatus = 0xffffa88c`e7007ab0)+0x4bd
0d ffffa88c`e7007a10 fffff805`20a87f2a     nt!IopInitializeSystemDrivers(void)+0x134
0e ffffa88c`e7007ab0 fffff805`207f0702     nt!IoInitSystem(struct _LOADER_PARAMETER_BLOCK * LoaderBlock = <Value unavailable error>)+0x12
0f ffffa88c`e7007ae0 fffff805`201cfd65     nt!Phase1Initialization(struct _LOADER_PARAMETER_BLOCK * LoaderBlock = 0xfffff805`1e3a1480)+0x42
10 ffffa88c`e7007b10 fffff805`20274a8c     nt!PspSystemThreadStartup(<function> * StartRoutine = 0xfffff805`207f06c0, void * StartContext = 0xfffff805`1e3a1480)+0x55
11 ffffa88c`e7007b60 00000000`00000000     nt!KiStartSystemThread(<Win32 error 0n87>)+0x1c
所以问题的根本原因OS启动加载driver的过程中，lwfmgr.sys这个driver调用ndis!NdisFDeregisterFilterDriver去访问了一个无效的地址导致的。
通过一些公开的资料：
NdisFDeregisterFilterDriver:
NdisFDeregisterFilterDriver function (ndis.h) - Windows drivers | Microsoft Docs <https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/ndis/nf-ndis-ndisfderegisterfilterdriver> 
A filter drivers calls the NdisFDeregisterFilterDriver function to release resources that it previously allocated with the NdisFRegisterFilterDriver <https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/ndis/nf-ndis-ndisfregisterfilterdriver>  function.
这个function其实是去释放filter driver之前调用NdisFRegisterFilterDriver <https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/ndis/nf-ndis-ndisfregisterfilterdriver> 分配的资源。
NdisFRegisterFilterDriver <https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/ndis/nf-ndis-ndisfregisterfilterdriver> :
NdisFRegisterFilterDriver function (ndis.h) - Windows drivers | Microsoft Docs <https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/ndis/nf-ndis-ndisfregisterfilterdriver> 
A filter driver calls the NdisFRegisterFilterDriver function to register its FilterXxx functions with NDIS.
NDIS_STATUS NdisFRegisterFilterDriver(
  PDRIVER_OBJECT                      DriverObject,
  NDIS_HANDLE                         FilterDriverContext,
  PNDIS_FILTER_DRIVER_CHARACTERISTICS FilterDriverCharacteristics,
  PNDIS_HANDLE                        NdisFilterDriverHandle
);
--------------

====第22封邮件====

发件人：Jia Wei
发送时间：2021-06-11 10:04:13.572000+00:00
邮件内容:
吴先生，您好
升级过程中蓝屏生成的Dump在如下位置：
*  %SystemDrive%\$Windows.~BT\Sources\Rollback\setupmem.dmp
*  %WinDir%\Panther\NewOS\Rollback\setupmem.dmp
另外，在sftp服务器上的/upload/升级蓝屏回退问题目录中上传了日志文件：
*  C_WinBT_Source_Rollback_setupmem.dmp  >>> 升级回滚dump日志文件
*  setupapi.dev.log >>>升级回滚lwfmgr安装失败日志文件
--------------

====第23封邮件====

发件人：Jia Wei
发送时间：2021-06-25 09:44:13.796000+00:00
邮件内容:
吴先生，您好
刚刚电话未能联系到您，关于升级过程蓝屏回退问题，是否还需要我们进一步协助？如果还有疑问您可以回复此邮件。谢谢
--------------

====第24封邮件====

发件人：win10升级支持
发送时间：2021-06-25 09:51:59.351000+00:00
邮件内容:
贾工，你好 
        该case可以关闭，目前应用方已经提供解决方案。 

====第25封邮件====

发件人：Jia Wei
发送时间：2021-06-25 10:06:36.724000+00:00
邮件内容:
吴先生, 您好!
很高兴收到您的邮件回复，根据沟通的结果，我将暂时归档此问题。案例归档后您会收到调查问卷的邮件，希望可以对我们的服务进行评价。
工单的归档并不会影响我们为您提供技术支持服务，如果您的问题复现，或有新的问题出现，您也可以致电我们的技术支持热线4008180055。
案例总结：
案例描述：
升级V2020-L过程中遇到蓝屏回退。在只安装TMS(66621版本)的计算机上，固定复现升级过程中第二次重启蓝屏、回退问题，报错0xc1900101–0x40017。
案例进展：
应用方已经提供解决方案，归档案例。
案例分析：
*   蓝屏原因：蓝屏当时对应线程的动作是OS启动过程中正在初始化并加载Driver。而在OS启动加载driver的过程中，lwfmgr.sys驱动调用ndis!NdisFDeregisterFilterDriver访问了一个无效的地址导致蓝屏。 
*   NdisFDeregisterFilterDriver函数的目的是去释放filter driver之前调用NdisFRegisterFilterDriver <https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/ndis/nf-ndis-ndisfregisterfilterdriver> 分配的资源。 
分析细节： 
Crashing Stack 
============================================ 
Process                   Thread           CID       UserTime KernelTime ContextSwitches Wait Reason Time State 
System (ffffdd0d39aa9300) ffffdd0d39aec400 4.8             0s     1s.563            2218 Executive     0s Running on CPU 0 
# Child-SP         Return           Call Site              Info                         Source 
0 ffffa88ce70062d8 fffff8052028599e nt!KeBugCheckEx+0x0 
1 (Inline)         - nt!PspUnhandledExceptionInSystemThread+0x27 
2 ffffa88ce70062e0 fffff8052024762f nt!PspSystemThreadStartup$filt$0+0x44 
3 ffffa88ce7006320 fffff8052027611f nt!__C_specific_handler+0x9f 
4 ffffa88ce7006390 fffff805201171d0 nt!RtlpExecuteHandlerForException+0xf 
5 ffffa88ce70063c0 fffff805201b68b4 nt!RtlDispatchException+0x430 
6 ffffa88ce7006b10 fffff8052027eec2 nt!KiDispatchException+0x144 
7 ffffa88ce70071c0 fffff8052027b1ae nt!KiExceptionDispatch+0xc2 
8 ffffa88ce70073a0 fffff8053606a2b7 nt!KiPageFault+0x42e 
9 ffffa88ce7007530 fffff80521915167 ndis!NdisFDeregisterFilterDriver+0x47 
a ffffa88ce7007570 fffff8052191b49a lwfmgr+0x5167   
 b ffffa88ce70075a0 fffff805206fca55 lwfmgr+0xb49a   
 c ffffa88ce7007830 fffff80520a63908 nt!IopLoadDriver+0x4bd 
d ffffa88ce7007a10 fffff80520a87f2a nt!IopInitializeSystemDrivers+0x134    >>> OS启动过程中正在初始化并加载Driver 
e ffffa88ce7007ab0 fffff805207f0702 nt!IoInitSystem+0x12 
f ffffa88ce7007ae0 fffff805201cfd65 nt!Phase1Initialization+0x42 
10 ffffa88ce7007b10 fffff80520274a8c nt!PspSystemThreadStartup+0x55 
11 ffffa88ce7007b60 0000000000000000 nt!KiStartSystemThread+0x1c 
This thread is crashing 
查看第9帧，可以看出蓝屏的直接原因是ndis的function NdisFDeregisterFilterDriver 到[rbx+158h]这个内存地址获取数据的时候，发现这个内存地址是个无效的内存地址，从而触发了内存违规访问导致了蓝屏。 
.frame /r 0x9; !mex.x 
09 ffffa88c`e7007530 fffff805`21915167     ndis!NdisFDeregisterFilterDriver+0x47 [minio\ndis\sys\lwfilter.c @ 449] 
rax=0000000000000000 rbx=0000000000000000 rcx=fffff8051e70e180 
rdx=0000000000000000 rsi=0000000000000000 rdi=ffffdd0d3b8c88f0 
rip=fffff8053606a2b7 rsp=ffffa88ce7007530 rbp=ffffa88ce7007930 
r8=0000000000000000  r9=0000000000000000 r10=fffff80520121b70 
r11=ffffa88ce70074d0 r12=ffffffff80000358 r13=0000000000000002 
r14=ffff868dc80c8670 r15=ffffdd0d3bbf5000 
iopl=0         nv up ei ng nz na pe nc 
cs=0010  ss=0018  ds=002b  es=002b  fs=0053  gs=002b             efl=00000282 
ndis!NdisFDeregisterFilterDriver+0x47: 
fffff805`3606a2b7 488b8b58010000  mov     rcx,qword ptr [rbx+158h] ds:002b:00000000`00000158=???????????????? 
@rbx              NdisFilterDriverHandle = 0x00000000`00000000 
分析根本原因，就要看NdisFDeregisterFilterDriver为什么会去这个无效地址[rbx+158h]拿数据；通过查看入参，查看rbx的地址，其实是lwfmgr.sys这个driver <mailto:发现@rbx的地址，其实是lwfmgr.sys这个driver> 传给ndis!NdisFDeregisterFilterDriver的： 
09 ffffa88c`e7007530 fffff805`21915167     ndis!NdisFDeregisterFilterDriver(void * NdisFilterDriverHandle = 0x00000000`00000000)+0x47 
0a ffffa88c`e7007570 fffff805`2191b49a     lwfmgr+0x5167 
0b ffffa88c`e70075a0 fffff805`206fca55     lwfmgr+0xb49a 
0c ffffa88c`e7007830 fffff805`20a63908     nt!IopLoadDriver(void * KeyHandle = 0xffffffff`80000358, unsigned char CheckForSafeBoot = 0x01 '', unsigned char IsFilter = <Value unavailable error>, long * DriverEntryStatus = 0xffffa88c`e7007ab0)+0x4bd 
0d ffffa88c`e7007a10 fffff805`20a87f2a     nt!IopInitializeSystemDrivers(void)+0x134 
0e ffffa88c`e7007ab0 fffff805`207f0702     nt!IoInitSystem(struct _LOADER_PARAMETER_BLOCK * LoaderBlock = <Value unavailable error>)+0x12 
0f ffffa88c`e7007ae0 fffff805`201cfd65     nt!Phase1Initialization(struct _LOADER_PARAMETER_BLOCK * LoaderBlock = 0xfffff805`1e3a1480)+0x42 
10 ffffa88c`e7007b10 fffff805`20274a8c     nt!PspSystemThreadStartup(<function> * StartRoutine = 0xfffff805`207f06c0, void * StartContext = 0xfffff805`1e3a1480)+0x55 
11 ffffa88c`e7007b60 00000000`00000000     nt!KiStartSystemThread(<Win32 error 0n87>)+0x1c 
所以问题的根本原因OS启动加载driver的过程中，lwfmgr.sys这个driver调用ndis!NdisFDeregisterFilterDriver去访问了一个无效的地址导致的。 
通过一些公开的资料： 
NdisFDeregisterFilterDriver: 
NdisFDeregisterFilterDriver function (ndis.h) - Windows drivers | Microsoft Docs <https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/ndis/nf-ndis-ndisfderegisterfilterdriver>  
A filter drivers calls the NdisFDeregisterFilterDriver function to release resources that it previously allocated with the NdisFRegisterFilterDriver <https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/ndis/nf-ndis-ndisfregisterfilterdriver>  function. 
这个function其实是去释放filter driver之前调用NdisFRegisterFilterDriver <https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/ndis/nf-ndis-ndisfregisterfilterdriver> 分配的资源。 
NdisFRegisterFilterDriver <https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/ndis/nf-ndis-ndisfregisterfilterdriver> : 
NdisFRegisterFilterDriver function (ndis.h) - Windows drivers | Microsoft Docs <https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/ndis/nf-ndis-ndisfregisterfilterdriver>  
A filter driver calls the NdisFRegisterFilterDriver function to register its FilterXxx functions with NDIS. 
NDIS_STATUS NdisFRegisterFilterDriver( 
  PDRIVER_OBJECT                      DriverObject, 
  NDIS_HANDLE                         FilterDriverContext, 
  PNDIS_FILTER_DRIVER_CHARACTERISTICS FilterDriverCharacteristics, 
  PNDIS_HANDLE                        NdisFilterDriverHandle 
); 
--------------
