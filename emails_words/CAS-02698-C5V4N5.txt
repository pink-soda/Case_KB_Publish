邮件主题：RE: [REG:120081126000849] CAS-02698-C5V4N5 - 升级1809后从网盘拷文件蓝屏

====第1封邮件====

发件人：Li Qi
发送时间：2020-07-30 10:53:06.971000+00:00
邮件内容:
吴先生，您好：
如刚才电话沟通，我谨在此阐述问题涉及的范围定义：
问题定义: 
系统在线升级至V2020-L后，频繁出现蓝屏 ，升级无线/有线网卡驱动之后，蓝屏问题依旧
问题范围: 协助您分析并处理上述问题。
如果您对以上的问题范围界定有任何异议，请尽快告知。如果您有其他任何疑问，也欢迎随时与我联系。
从您提供的dump日志分析，蓝屏问题由ndis.sys即网卡驱动引发，但由于bugcheck不同，无法确认网卡驱动的兼容问题是否为根本原因，鉴于目前您已更新相关驱动程序至最新，建议优先观察，待蓝屏问题复现后，收集full dump进行具体分析，谢谢

====第2封邮件====

发件人：Li Qi
发送时间：2020-07-31 15:31:53.051000+00:00
邮件内容:
吴先生，您好：
如刚才电话沟通，通过对您提供的full dump进行分析，从call stack上查看，可以看到当系统调用vwifimf时，NT一直在尝试拓展堆栈空间，最终引起后续的PageFault
那么vwifimf的执行操作是什么呢？结合之前类似的蓝屏案例以及您提供的反馈，在此之前进行过无线网卡的升级和DSP的版本升级。目前怀疑DSP的版本升级导致vwifimf在调用过程中出现错误，进而导致蓝屏。
以下为之前问题开启special pool之后看到的DSP行为，供参考！
通过与您的沟通，目前已指导用户降级DSP的版本，截至目前尚未发现蓝屏问题，因此建议下一步先观察一段时间，以确认是否为DSP的版本不兼容导致。如仍有问题，结合在vwifimf之前的堆栈信息，建议降级无线网卡驱动尝试！

====第3封邮件====

发件人：Li Qi
发送时间：2020-08-05 10:47:47.880000+00:00
邮件内容:
吴先生，您好：
由于电话未联系到您，谨以此邮件与您同步下有关最新dump文件的分析情况。
最新收集的dump文件发生在另一机型T490s上，其bugcheck为D1,经查询为DPC中断等待低优先级进程运行时引发的page fault，导致蓝屏。
以下为call stack信息：
可以看到DPC正常call起KiRetireDpcList，此时因为某些行为打断了DPC操作，进入等待，接下来的操作是一系列的网卡协议行为，当运行至nwifi.sys时，引发page fault，而这是不能发生在DPC中断过程中的（因为优先级低），DPC等待超时，最终蓝屏
以下为CPU0的DPC运行情况：
从该日志分析来看：
1， 应是偶发性蓝屏，由于系统逻辑错误引发page fault，导致DPC超时的蓝屏，请问后续是否这台机器继续发生蓝屏现象，有无具体的用户操作可以复现
2， 结合之前的工行案例，nwifi的问题与网卡驱动有关，建议优先升级网卡驱动，请问是否已升级至最新的网卡驱动？
3， 由于call stack中的网卡行为由ndis.sys驱动，为排除该影响因素，请问近期是否更新最新系统补丁？

====第4封邮件====

发件人：win10sup@sdc.icbc.com.cn
发送时间：2020-08-06 16:14:12.159000+00:00
邮件内容:
李工，你好 
        昨天开会比较忙。针对案例分析结果，用户是在连接无线的环境下拷贝数据时蓝屏。网卡驱动已经更新最新，能否在日志中具体分析出是哪个应用或者程序导致DPC中断？单从目前的结论以及用户操作来看都指向是驱动引发蓝屏。能否从系统层面进行分析？该操作是由哪个应用或者程序引起的DPC中断？ 

====第5封邮件====

发件人：Li Qi
发送时间：2020-08-06 17:31:52.502000+00:00
邮件内容:
吴先生，您好：
如刚才电话沟通，请帮忙在新出现的频繁蓝屏的电脑上收集dump文件，并拷贝附件文件至本地，运行beta版收集日志工具，仅供此次蓝屏分析使用。
1.      运行CreateFile.bat创建升级日志文件；
2.      运行LogCollector.exe，选择所有日志，点击收集。
针对最新出现的蓝屏问题，请帮忙确认并完善如下具体信息（黄色部分）：
机型：？？？
固定复现步骤：在无线环境下，拷贝数据必现蓝屏问题
背景：通过CUA升级操作系统至V2020-L，运行工行定制内容脚本文件，安装稳定版TMS,DSP等必装软件？

====第6封邮件====

发件人：Li Qi
发送时间：2020-08-06 18:00:53.240000+00:00
邮件内容:
吴先生，您好：
为了方便您的操作，您可以使用最新附件中的beta版工具进行收集，即运行CMGELogCollector.exe，进行收集即可，步骤如下：
运行CMGELogCollector.exe，选择如下图类型日志，点击收集。
Dump文件收集方式不变，待您收集完整后，请上传至sftp并告知我，谢谢
针对最新出现的蓝屏问题，请帮忙确认并完善如下具体信息（黄色部分）：
机型：？？？
固定复现步骤：在无线环境下，拷贝数据必现蓝屏问题
背景：通过CUA升级操作系统至V2020-L，运行工行定制内容脚本文件，安装稳定版TMS,DSP等必装软件？

====第7封邮件====

发件人：Li Qi
发送时间：2020-08-10 13:49:53.582000+00:00
邮件内容:
吴先生，您好：
循例问下，新的蓝屏日志是否收集并上传，连接无线拷贝数据时蓝屏的问题是否依然存在，盼复，谢谢

====第8封邮件====

发件人：Li Qi
发送时间：2020-08-12 16:01:36.019000+00:00
邮件内容:
吴先生，您好：
针对伍玉霞电脑的蓝屏分析： bugcheck 50（page fault）的原因是 page fault内存错误引用导致。
PAGE_FAULT_IN_NONPAGED_AREA (50)
Invalid system memory was referenced.  This cannot be protected by try-except.
Typically the address is just plain bad or it is pointing at freed memory.
Arguments:
Arg1: ffffffffffffffe8, memory referenced.
Arg2: 0000000000000000, value 0 = read operation, 1 = write operation.
Arg3: fffff8057b5694fd, If non-zero, the instruction address which referenced the bad memory
address.
Arg4: 0000000000000002, (reserved)
由于涉及到驱动，需要查看bad memory是哪个驱动引起的，因此必须开启special pool。务必提示用户开启后的风险。
Important:  
开启special pool可能会引起系统性能下降，导致蓝屏问题更容易触发。
1、开special pool
请按照如下方法开启special pool:
a.  右键单击开始按钮-> 选择“运行”,输入 verifier 点击确认. 
b.  选择 "创建自定义设置"再点击下一步. 
c.  勾选 "特殊池"再点击下一步. 
d.  选择“从一个列表选择驱动程序名”
e.  点击“全选”，再点击完成
f.  重启计算机生效
2. 关闭special pool
a.            右键单击开始按钮-> 选择“运行”, 输入 verifier 点击确认. 
b.            选择“删除现有设置”，点击完成，再重启生效

====第9封邮件====

发件人：Li Qi
发送时间：2020-08-12 16:05:45.930000+00:00
邮件内容:
Hi，Hua Bin：
第四次的dump文件与系统日志已上传，和第三次的dump为同一台问题电脑，并且已经建议用户在这台电脑上开启special pool，请知悉。
另外据了解，用户应该尚未更新补丁至最新，请从现有两个dump中帮忙分析是否与未更新完成有关，谢谢

====第10封邮件====

发件人：win10sup@sdc.icbc.com.cn
发送时间：2020-08-13 11:04:48.997000+00:00
邮件内容:
针对蓝屏现象频繁出现，开发中心要求工程师现场驻场分析 
请提供以下工程师信息： 
姓名 身份证号码 联系电话 行程轨迹截图（北京需要提供健康包截图） 
以上信息务必在今天内提供 

====第11封邮件====

发件人：Li Qi
发送时间：2020-08-13 11:39:34.476000+00:00
邮件内容:
吴先生，您好：
姓名：李琦
电话：15701386210
身份证号：110223198601270039
行程轨迹截图请参见附件，谢谢

====第12封邮件====

发件人：Bin Hua
发送时间：2020-08-13 17:56:33.450000+00:00
邮件内容:
Hi 李琦，
如电话所谈，第四次dump bugcheck与第三次不同，但两次dump 出现Error 0x80070057表示invalid parameter,说明dump中的部分信息损坏，无法解码出call stack，与系统更新没有直接关系。
根据以往案例的最佳实践，建议客户有条件的情况下，升级Windows补丁到最新KB 4559003（当前补丁状态是2019年9月）。
了解到第四次dump生成前客户尚未开启special pool，建议客户开启后复现问题，再提供dump以便分析。
华斌
Support Escalation Eng | Microsoft China Co Ltd | +86 (510) 66657739 | bihua@microsoft.com <mailto:bihua@microsoft.com> 

====第13封邮件====

发件人：Bin Hua
发送时间：2020-08-17 14:53:31.210000+00:00
邮件内容:
Hi 李琦，
今天上午收集的Windows 10 1803版本的蓝屏已分析完毕，发现如下：
根据call stack，在进行无线网络发送网络包时，发现网络包数据异常（内部数据pTOS为空）引起的蓝屏重启。
通过查看该网络包的内部结构，该内存地址ffffe08f`6fa3fb20是由三方迷你网卡过滤驱动（mini-port filter driver）vwifimf.sys 维护的。
下一步建议：
卸载vwifimf.sys驱动，或引入vwifimf.sys的驱动厂商进一步排查为何把NBL 的pTOS参数设置为空。
Dump分析：
Call Stack:
0: kd> kc
# Call Site
00 nt!KeBugCheckEx
01 nt!KiBugCheckDispatch
02 nt!KiPageFault
03 nwifi!Dot11SendCompletion
04 nwifi!Pt6SendComplete
05 ndis!ndisCallSendCompleteHandler
06 ndis!ndisIterativeDPInvokeHandlerOnTracker
07 ndis!ndisInvokeNextSendCompleteHandler
08 ndis!ndisMSendNetBufferListsCompleteInternal
09 ndis!NdisMSendNetBufferListsComplete
0a wdiwifi!CPort::SendCompleteNetBufferLists
0b wdiwifi!CAdapter::SendCompleteNbl
0c wdiwifi!CTxMgr::CompleteNdisNbl
0d wdiwifi!CTxMgr::CompleteNBLs
0e wdiwifi!CTxMgr::TxTransferCompleteInd
0f wdiwifi!AdapterTxTransferCompleteInd
10 Netwtw08
11 Netwtw08
12 Netwtw08
13 Netwtw08
14 Netwtw08
15 Netwtw08
16 Netwtw08
17 Netwtw08
0: kd> dt ffffe08f`6fa3fb20 DOT11_PACKET_CONTEXT
nwifi!DOT11_PACKET_CONTEXT
   +0x000 pVElan           : 0xffffe08f`70f738b0 _VELAN
   +0x008 pMacStateEntry   : 0x00000000`00001002 DOT11_MAC_STATE_ENTRY
   +0x010 uPriority        : 0x2080003
   +0x014 QoSInfo          : _DOT11_QOS_SEND_INFO
   +0x018 pvEthernetMediaSpecificInfo : 0xffff8a00`003b55c8 Void
   +0x020 bExcludeWEP      : 0n0
   +0x024 bDefaultKeyAllowed : 0n112
   +0x028 pTOS             : 0xffffe08f`6fa3fb50 DOT11_COMPLETION_STACK_ENTRY  //this was Null when enter function nwifi!Dot11SendCompletion
   +0x030 CmplArray        : [16] DOT11_COMPLETION_STACK_ENTRY
   +0x1b0 SendExt          : _DOT11_SEND_CONTEXT
   +0x1b0 ExtSTASendExt    : DOT11_EXTSTA_SEND_CONTEXT
   +0x200 ExtV2            : _DOT11_SEND_EXTENSION_INFO_V2
   +0x206 ucExtRates       : [247]  ""
   +0x1b0 RecvExt          : _DOT11_RECV_CONTEXT
   +0x1b0 ExtSTARecvExt    : DOT11_EXTSTA_RECV_CONTEXT
Running: !mex.tag Filt
Name    Number of Hits Version Time Stamp          Location
======= ============== ======= =================== ========================================
vwifimf              1 0.0.0.0 06/23/2020 03:10:42 \SystemRoot\system32\DRIVERS\vwifimf.sys
Hits
============================================
fffff802`b97b1790  41 b8 46 69 6c 74 03 d1-0f b7 08 8d 94 0a 08 01  A.Filt..........
Search complete
kd> lmvm vwifimf
Browse full module list
start             end                 module name
fffff802`b97b0000 fffff802`b97ba000   vwifimf    (no symbols)           
    Loaded symbol image file: vwifimf.sys
    Image path: \SystemRoot\system32\DRIVERS\vwifimf.sys
    Image name: vwifimf.sys
    Browse all global symbols  functions  data
    Timestamp:        Tue Jun 23 11:10:42 2020 (5EF172B2)
    CheckSum:         0000EDC3
    ImageSize:        0000A000
    Translations:     0000.04b0 0000.04e4 0409.04b0 0409.04e4
    Information from resource tables:
    (RASPPPOE)         ffffe08f7073dc10    Declined with NDIS_STATUS_FAILURE
Filter list        Driver              Module             Context           
    WFP 802.3 MAC Layer LightWeight Filter-0000
                       ffffe08f6a29bd60    ffffe08f6e7a9c60   ffffe08f6e7aa010
    QoS Packet Scheduler-0000
                       ffffe08f6a662a20    ffffe08f6e7bd010   ffffe08f6e7aa650
    Phenix NDIS LightWeight Filter-0000
                       ffffe08f6a7b27c0    ffffe08f6e796390   ffffe08f6e7b27d0
    Native WiFi Filter Driver-0000
                       ffffe08f6e77ad70    ffffe08f6e798010   ffffe08f6e77b810
    NDIS Sample LightWeight Filter 1-0000
                       ffffe08f6a61d7b0    ffffe08f6e793c60   ffffe08f6e793640
    Virtual WiFi Filter Driver-0000
                       ffffe08f6a6327c0    ffffe08f6e78fc60   ffffe08f6e792010
    WFP Native MAC Layer LightWeight Filter-0000
                       ffffe08f6a29bab0    ffffe08f6e773450   ffffe08f6e7f6940
华斌
Support Escalation Eng | Microsoft China Co Ltd | +86 (510) 66657739 | bihua@microsoft.com <mailto:bihua@microsoft.com> 

====第14封邮件====

发件人：Li Qi
发送时间：2020-08-17 16:39:35.635000+00:00
邮件内容:
吴先生，您好：
上午上传的dump分析，目前结论如下：
根据call stack，在进行无线网络发送网络包时，发现网络包数据异常（内部数据pTOS为空）引起的蓝屏重启。
通过查看该网络包的内部结构，该内存地址ffffe08f`6fa3fb20是由三方迷你网卡过滤驱动（mini-port filter driver）vwifimf.sys 维护的。
下一步建议：
卸载vwifimf.sys驱动，或引入vwifimf.sys的驱动厂商（即沈阳通软）进一步排查为何把NBL的pTOS参数设置为空。
Dump分析：
Call Stack:
0: kd> kc
# Call Site
00 nt!KeBugCheckEx
01 nt!KiBugCheckDispatch
02 nt!KiPageFault
03 nwifi!Dot11SendCompletion
04 nwifi!Pt6SendComplete
05 ndis!ndisCallSendCompleteHandler
06 ndis!ndisIterativeDPInvokeHandlerOnTracker
07 ndis!ndisInvokeNextSendCompleteHandler
08 ndis!ndisMSendNetBufferListsCompleteInternal
09 ndis!NdisMSendNetBufferListsComplete
0a wdiwifi!CPort::SendCompleteNetBufferLists
0b wdiwifi!CAdapter::SendCompleteNbl
0c wdiwifi!CTxMgr::CompleteNdisNbl
0d wdiwifi!CTxMgr::CompleteNBLs
0e wdiwifi!CTxMgr::TxTransferCompleteInd
0f wdiwifi!AdapterTxTransferCompleteInd
10 Netwtw08
11 Netwtw08
12 Netwtw08
13 Netwtw08
14 Netwtw08
15 Netwtw08
16 Netwtw08
17 Netwtw08
0: kd> dt ffffe08f`6fa3fb20 DOT11_PACKET_CONTEXT
nwifi!DOT11_PACKET_CONTEXT
   +0x000 pVElan           : 0xffffe08f`70f738b0 _VELAN
   +0x008 pMacStateEntry   : 0x00000000`00001002 DOT11_MAC_STATE_ENTRY
   +0x010 uPriority        : 0x2080003
   +0x014 QoSInfo          : _DOT11_QOS_SEND_INFO
   +0x018 pvEthernetMediaSpecificInfo : 0xffff8a00`003b55c8 Void
   +0x020 bExcludeWEP      : 0n0
   +0x024 bDefaultKeyAllowed : 0n112
   +0x028 pTOS             : 0xffffe08f`6fa3fb50 DOT11_COMPLETION_STACK_ENTRY  //this was Null when enter function nwifi!Dot11SendCompletion
   +0x030 CmplArray        : [16] DOT11_COMPLETION_STACK_ENTRY
   +0x1b0 SendExt          : _DOT11_SEND_CONTEXT
   +0x1b0 ExtSTASendExt    : DOT11_EXTSTA_SEND_CONTEXT
   +0x200 ExtV2            : _DOT11_SEND_EXTENSION_INFO_V2
   +0x206 ucExtRates       : [247]  ""
   +0x1b0 RecvExt          : _DOT11_RECV_CONTEXT
   +0x1b0 ExtSTARecvExt    : DOT11_EXTSTA_RECV_CONTEXT
Running: !mex.tag Filt
Name    Number of Hits Version Time Stamp          Location
======= ============== ======= =================== ========================================
vwifimf              1 0.0.0.0 06/23/2020 03:10:42 \SystemRoot\system32\DRIVERS\vwifimf.sys
Hits
============================================
fffff802`b97b1790  41 b8 46 69 6c 74 03 d1-0f b7 08 8d 94 0a 08 01  A.Filt..........
Search complete
kd> lmvm vwifimf
Browse full module list
start             end                 module name
fffff802`b97b0000 fffff802`b97ba000   vwifimf    (no symbols)           
    Loaded symbol image file: vwifimf.sys
    Image path: \SystemRoot\system32\DRIVERS\vwifimf.sys
    Image name: vwifimf.sys
    Browse all global symbols  functions  data
    Timestamp:        Tue Jun 23 11:10:42 2020 (5EF172B2)
    CheckSum:         0000EDC3
    ImageSize:        0000A000
    Translations:     0000.04b0 0000.04e4 0409.04b0 0409.04e4
    Information from resource tables:
    (RASPPPOE)         ffffe08f7073dc10    Declined with NDIS_STATUS_FAILURE
Filter list        Driver              Module             Context           
    WFP 802.3 MAC Layer LightWeight Filter-0000
                       ffffe08f6a29bd60    ffffe08f6e7a9c60   ffffe08f6e7aa010
    QoS Packet Scheduler-0000
                       ffffe08f6a662a20    ffffe08f6e7bd010   ffffe08f6e7aa650
    Phenix NDIS LightWeight Filter-0000
                       ffffe08f6a7b27c0    ffffe08f6e796390   ffffe08f6e7b27d0
    Native WiFi Filter Driver-0000
                       ffffe08f6e77ad70    ffffe08f6e798010   ffffe08f6e77b810
    NDIS Sample LightWeight Filter 1-0000
                       ffffe08f6a61d7b0    ffffe08f6e793c60   ffffe08f6e793640
    Virtual WiFi Filter Driver-0000
                       ffffe08f6a6327c0    ffffe08f6e78fc60   ffffe08f6e792010
    WFP Native MAC Layer LightWeight Filter-0000
                       ffffe08f6a29bab0    ffffe08f6e773450   ffffe08f6e7f6940

====第15封邮件====

发件人：Li Qi
发送时间：2020-08-18 13:57:00.188000+00:00
邮件内容:
吴先生，您好：
昨天有关于插拔U盘导致蓝屏的问题，分析如下：
造成此问题是由于开启special pool之后，detect到有驱动组件在进行违规操作导致，bugcheck detail如下：
Bugcheck details
============================================
DRIVER_VERIFIER_DETECTED_VIOLATION (c4)
A device driver attempting to corrupt the system has been caught.  This is
because the driver was specified in the registry as being suspect (by the
administrator) and the kernel has enabled substantial checking of this driver.
If the driver attempts to corrupt the system, bugchecks 0xC4, 0xC1 and 0xA will
be among the most commonly seen crashes.
Arguments:
Arg1: 00000000000000f6, Referencing user handle as KernelMode.
Arg2: 00000000000024b0, Handle value being referenced.
Arg3: ffffe6841fa57580, Address of the current process.
Arg4: fffff8089d90aa39, Address inside the driver that is performing the incorrect reference.
Crashing Stack
============================================
Process                         Thread           CID       UserTime KernelTime ContextSwitches Wait Reason Time State            COM-Initialized
explorer.exe (ffffe6841fa57580) ffffe6841cf4f080 1944.c04        0s       31ms               5 WrPageIn      0s Running on CPU 1 APTKIND_APARTMENTTHREADED (STA)
具体的call stack信息如下：
0 ffff9903d62c66f8 fffff80162c3e483 nt!KeBugCheckEx+0x0                                         
 1 ffff9903d62c6700 fffff80162c469d4 nt!VerifierBugCheckIfAppropriate+0xdf                       
 2 ffff9903d62c6740 fffff80162ad2f5d nt!VfCheckUserHandle+0x1d4                                  
 3 ffff9903d62c6830 fffff80162930b9e nt!ObpReferenceObjectByHandleWithTag+0x1a23ad               
 4 (Inline)         - nt!ObReferenceObjectByHandleWithTag+0x2a                    
 5 ffff9903d62c68c0 fffff801628dff93 nt!ObReferenceObjectByHandle+0x2e                           
 6 (Inline)         - nt!_ObReferenceObjectByHandle+0x24                          
 7 ffff9903d62c6910 fffff801625da143 nt!NtQuerySymbolicLinkObject+0xf3                           
 8 ffff9903d62c6990 fffff801625cd4c0 nt!KiSystemServiceCopyEnd+0x13                              
 9 ffff9903d62c6b28 fffff80162c575d6 nt!KiServiceLinkage+0x0                                     
 a ffff9903d62c6b30 fffff8089d90aa39 nt!VfZwQuerySymbolicLinkObject+0x56                         
 b ffff9903d62c6b60 fffff8089d90ab92 gscfmgr+0xaa39 
 c ffff9903d62c6ec0 fffff8089d905c0d gscfmgr+0xab92 
 d ffff9903d62c6ef0 fffff8089c3dae29 gscfmgr+0x5c0d 
向上追溯gscfmgr的行为，可以看到调用ObpReferenceObjectByHandleWithTag
1: kd> .frame /r 0x3; !mex.x
03 ffff9903`d62c6830 fffff801`62930b9e nt!ObpReferenceObjectByHandleWithTag+0x1a23ad [minkernel\ntos\ob\obref.c @ 1918] 
rax=fffff8089d90aa39 rbx=ffffe6840f8b09e0 rcx=00000000000000c4
rdx=00000000000000f6 rsi=0000000000000000 rdi=ffffe6841fa57580
rip=fffff80162ad2f5d rsp=ffff9903d62c6830 rbp=ffff9903d62c6a10
r8=00000000000024b0  r9=ffffe6841fa57580 r10=0000000000000004
r11=ffff9903d62c67d0 r12=ffff9903d62c6940 r13=0000000000000000
r14=ffffe6841cf4f080 r15=00000000000024b0
iopl=0         nv up ei pl zr na po nc
cs=0010  ss=0018  ds=002b  es=002b  fs=0053  gs=002b             efl=00000246
nt!ObpReferenceObjectByHandleWithTag+0x1a23ad:
fffff801`62ad2f5d 90              nop
@r15              Handle = 0x00000000`000024b0//handle address
ffff9903`d62c68c8 DesiredAccess = 1
@rbx              ObjectType = 0xffffe684`0f8b09e0
ffff9903`d62c68d8 AccessMode = 0n0 ''//kernel mode
ffff9903`d62c68e0 Tag = 0x746c6644
@r12              Object = 0xffff9903`d62c6940
ffff9903`d62c68f0 HandleInformation = 0x00000000`00000000
@r13              ObjectInfo = 0x00000000`00000000
<unavailable>     ObjectHeader = <value unavailable>
ffff9903`d62c6860 ObjectEntryData = union _HANDLE_TABLE_ENTRY
ffff9903`d62c68c0 Process = 0xffffe684`1fa57580
ffff9903`d62c68e8 ReleaseTable = 0x00 ''
@r14              Thread = 0xffffe684`1cf4f080
<unavailable>     ExtraInfo = <value unavailable>
<unavailable>     GrantedAccess = <value unavailable>
<unavailable>     HandleTable = <value unavailable>
<unavailable>     AuditOnClose = <value unavailable>
<unavailable>     Status = <value unavailable>
之后，我们看下ObReferenceObjectByHandle函数的具体用法及信息，参见以下链接：https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/wdm/nf-wdm-obreferenceobjectbyhandle?redirectedfrom=MSDN
可以看到，问题是由于系统Referencing user handle as KernelMode导致，即ObReferenceObjectByHandle引用参数AccessMode为kernelMode下的user handle，这是操作系统不允许的，进而造成的C4蓝屏。
建议联系TMS厂商进行问题排查，谢谢

====第16封邮件====

发件人：Li Qi
发送时间：2020-08-18 14:03:56.661000+00:00
邮件内容:
吴先生，您好：
有关昨天收到的魏女士的电脑频繁蓝屏问题，分析结果与一年前的TMS问题类似，结果如下：
系统crash是由于list entry出现损坏导致
Bugcheck信息：
Bugcheck details
============================================
KERNEL_SECURITY_CHECK_FAILURE (139)
A kernel component has corrupted a critical data structure.  The corruption
could potentially allow a malicious user to gain control of this machine.
Arguments:
Arg1: 0000000000000003, A LIST_ENTRY has been corrupted (i.e. double remove).
Arg2: ffffe28054c37200, Address of the trap frame for the exception that caused the bugcheck
Arg3: ffffe28054c37158, Address of the exception record for the exception that caused the bugcheck
Arg4: 0000000000000000, Reserved
Crashing Stack
============================================
Process                   Thread           CID       UserTime KernelTime ContextSwitches Wait Reason Time State
System (ffffbc8523e62200) ffffbc8535046040 4.2080          0s     9s.328          362906 Executive     0s Running on CPU 0
Call stack信息：
0 ffffe28054c36ed8 fffff80357fd88e9 nt!KeBugCheckEx+0x0                    
 1 ffffe28054c36ee0 fffff80357fd8c90 nt!KiBugCheckDispatch+0x69             
 2 ffffe28054c37020 fffff80357fd708e nt!KiFastFailDispatch+0xd0             
 3 ffffe28054c37200 fffff803583ba457 nt!KiRaiseSecurityCheckFailure+0x30e   
 4 (Inline)         - nt!RtlFailFast+0x5                     
 5 (Inline)         - nt!FatalListEntryError+0x5             
 6 (Inline)         - nt!RemoveHeadList+0x65                                          
 7 ffffe28054c37390 fffff8035b4f953f nt!FsRtlTeardownPerFileContexts+0xc7                
在进行remove head list时发生crash，损坏的地址为：
损坏的地址为0xffffbc85`33f67d10
0: kd> .frame 0n6;dv /t /v
06 (Inline Function) --------`-------- nt!RemoveHeadList+0x65 [internal\minwin\priv_sdk\inc\ntrtl_x.h @ 900] 
@rsi              struct _LIST_ENTRY * Entry = 0xffffbc85`33f67d10 [ 0xffffbc85`33f4b108 - 0x00000000`00000000 ]
@rax              struct _LIST_ENTRY * NextEntry = 0xffffbc85`33f4b108 [ 0xffffbc85`33f67d08 - 0xffffbc85`33f67d08 ]
0: kd> dx -id 0,0,ffffbc8523e62200 -r1 ((ntkrnlmp!_LIST_ENTRY *)0xffffbc8533f67d10)
((ntkrnlmp!_LIST_ENTRY *)0xffffbc8533f67d10)                 : 0xffffbc8533f67d10 [Type: _LIST_ENTRY *]
    [+0x000] Flink            : 0xffffbc8533f4b108 [Type: _LIST_ENTRY *]
[+0x008] Blink            : 0x0 [Type: _LIST_ENTRY *]
查看这个list entry的pool分布信息，发现在这个pool的block之前是tag为Filt的block，即vwifimf.sys。大概率怀疑是Filt越界写导致的。
ffffbc8533f67c00 size:   30 previous size:    0  (Allocated)  FSfc
ffffbc8533f67c30 size:   30 previous size:    0  (Allocated)  FSfc
ffffbc8533f67c60 size:   30 previous size:    0  (Allocated)  FOCX
ffffbc8533f67c90 size:   30 previous size:    0  (Allocated)  Io  
 ffffbc8533f67cc0 size:   30 previous size:    0  (Allocated)  Filt
*ffffbc8533f67cf0 size:   30 previous size:    0  (Allocated) *FSfc
                Pooltag FSfc : Unrecoginzed File System Run Time allocations (update pooltag.w), Binary : nt!fsrtl
ffffbc8533f67d20 size:   30 previous size:    0  (Free)       FSfc
由于无法开启special pool，故而无法进一步定位到TMS具体的读写操作过程。建议由TMS厂商进行进一步排查。

====第17封邮件====

发件人：Li Qi
发送时间：2020-08-19 09:23:17.829000+00:00
邮件内容:
吴先生，您好：
如之前沟通，根据已收集的dump，针对此问题，目前已分析完毕。请您邮件确认此问题分析结果：
Case No：CAS-02698-C5V4N5
问题描述：
=====================
用户反馈，V0-H升级V2020-L频繁蓝屏
问题分析：
=====================
伍玉霞PC的蓝屏问题：
Call Stack与E视讯的蓝屏dump基本一致，即蓝屏发生在网络发包阶段，造成PageFault。
下一步动作：
=====================
由于该蓝屏问题为并无具体复现步骤的偶发性蓝屏，从此次蓝屏dump分析，大概率判断原因与E视讯蓝屏的case相同，建议由TMS厂商进行进一步排查，优先解决为何把NBL的pTOS参数设置为空的问题，谢谢。

====第18封邮件====

发件人：Li Qi
发送时间：2020-08-19 09:37:04.955000+00:00
邮件内容:
Hi，粤总：
请帮忙毓杰邮件确认该问题的分析结果，谢谢

====第19封邮件====

发件人：Bin Hua
发送时间：2020-08-19 10:35:37.682000+00:00
邮件内容:
Hi 李琦，
8月11号的first-dump，问题原因经过代码工程师确认与8月17号收集的1803版本蓝屏原因相同，都是pTOS数据异常引起的蓝屏重启。
下一步建议：
卸载vwifimf.sys驱动，或引入vwifimf.sys的驱动厂商进一步排查NBL 的pTOS参数设置。
Dump分析：
Bugcheck 0xfc，在不可执行的内存空间fffff8032addb290执行命令，导致了蓝屏。
ATTEMPTED_EXECUTE_OF_NOEXECUTE_MEMORY (fc)
An attempt was made to execute non-executable memory.  The guilty driver
is on the stack trace (and is typically the current instruction pointer).
When possible, the guilty driver's name (Unicode string) is printed on
the bugcheck screen and saved in KiBugCheckDriver.
Arguments:
Arg1: fffff8032addb290, Virtual address for the attempted execute.
Arg2: 89000002284fe863, PTE contents.
Arg3: fffff08f489f4b50, (reserved)
Arg4: 0000000000000002, (reserved)
Callstack
1: kd> kc
# Call Site
00 nt!KeBugCheckEx
01 nt!MiCheckSystemNxFault
02 nt!MiSystemFault
03 nt!MmAccessFault
04 nt!KiPageFault
05 tcpip!Ipv4Global
06 nwifi!Dot11SendCompletion
07 nwifi!Pt6SendComplete
08 ndis!ndisCallSendCompleteHandler
09 ndis!ndisDataPathExpandStackCallback
0a nt!KeExpandKernelStackAndCalloutInternal
0b nt!KeExpandKernelStackAndCalloutEx
*	内存空间fffff8032addb290存放的是数据体pTOS的参数pRoutine, 通过查看pTOS所在内存地址0xffff8102`1744d1b0是由三方迷你网卡过滤驱动（mini-port filter driver）vwifimf.sys 维护的。
1: kd> .frame /r 0x5; !mex.x
05 fffff08f`489f4ce8 fffff803`2f869513     tcpip!Ipv4Global
rax=fffff8032addb290 rbx=fffff08f489eb3b0 rcx=ffff810210913d90
rdx=0000000000000000 rsi=ffff810210913d90 rdi=ffff81021744d1e0
rip=fffff8032addb290 rsp=fffff08f489f4ce8 rbp=0000000000000000
r8=ffffb08061b864f0  r9=0000000000000001 r10=ffff81020f092880
r11=0000000000000001 r12=0000000000000000 r13=000000000000002c
r14=fffff8032a9a8490 r15=0000000000000000
iopl=0         nv up ei pl zr na po nc
cs=0010  ss=0018  ds=002b  es=002b  fs=0053  gs=002b             efl=00000246
tcpip!Ipv4Global:
fffff803`2addb290 0100            add     dword ptr [rax],eax ds:002b:fffff803`2addb290=00000001
1: kd> .frame 0n6; !mex.x
06 fffff08f`489f4cf0 fffff803`2f86d66d     nwifi!Dot11SendCompletion+0x4b
@rsi              pNdisPacket = 0xffff8102`10913d90
@ebp              ndisStatus = 0n0
@rdi              pBOS = 0xffff8102`1744d1e0
@rbx              pTOS = 0xfffff08f`489eb3b0
1: kd> !mex.ddt -n pTOS
dt -n pTOS  () Recursive: [ -r1 -r2 -r ] Verbose dx Normal dt
=
Local var @ rbx Type DOT11_COMPLETION_STACK_ENTRY*
   +0x000 pRoutine                 : 0xfffff803`2addb290 Void   
   +0x008 pCtxt                    : 0xffffb080`61b864f0 Void   
   +0x010 pCtxt2                   : 0x00000000`00000001 Void   
1: kd> dt 0xffff8102`10913d90 DOT11_PACKET
nwifi!DOT11_PACKET
   +0x000 Next             : (null) 
   +0x008 FirstNetBuffer   : 0xffff8102`10913f10 _NET_BUFFER
   +0x000 Link             : _SLIST_HEADER
   +0x000 NetBufferListHeader : _NET_BUFFER_LIST_HEADER
   +0x010 Context          : 0xffff8102`1744d1a0 _NET_BUFFER_LIST_CONTEXT
   +0x018 ParentNetBufferList : (null) 
   +0x020 NdisPoolHandle   : 0xffff8102`0f50f040 Void
   +0x030 NdisReserved     : [2] (null) 
   +0x040 ProtocolReserved : [4] 0xffff8102`10181030 Void
   +0x060 MiniportReserved : [2] (null) 
   +0x070 Scratch          : (null) 
   +0x078 SourceHandle     : 0xffff8102`075046a0 Void
   +0x080 NblFlags         : 0
   +0x084 ChildRefCount    : 0n0
   +0x088 Flags            : 0x500
   +0x08c Status           : 0n0
   +0x08c NdisReserved2    : 0
   +0x090 NetBufferListInfo : [26] (null) 
1: kd> !pool 0xffff8102`1744d1b0 
Pool page ffff81021744d1b0 region is Nonpaged pool
ffff81021744d010 size:   30 previous size:    0  (Allocated)  DSnd
ffff81021744d040 size:   30 previous size:    0  (Allocated)  DSnd
ffff81021744d070 size:   30 previous size:    0  (Allocated)  DSnd
ffff81021744d0a0 size:   30 previous size:    0  (Allocated)  Io  
 ffff81021744d0d0 size:   30 previous size:    0  (Allocated)  FSfc
ffff81021744d100 size:   30 previous size:    0  (Allocated)  DSnd
ffff81021744d130 size:   30 previous size:    0  (Free)       VWFF
ffff81021744d160 size:   30 previous size:    0  (Free)       IoUs
*ffff81021744d190 size:   30 previous size:    0  (Allocated) *Filt
1: kd> !tag Filt
Name    Number of Hits Version Time Stamp          Location
======= ============== ======= =================== ========================================
vwifimf              1 0.0.0.0 06/23/2020 03:10:42 \SystemRoot\system32\DRIVERS\vwifimf.sys
Hits
============================================
fffff803`2bb61790  41 b8 46 69 6c 74 03 d1-0f b7 08 8d 94 0a 08 01  A.Filt..........
华斌
Support Escalation Eng | Microsoft China Co Ltd | +86 (510) 66657739 | bihua@microsoft.com <mailto:bihua@microsoft.com> 

====第20封邮件====

发件人：Li Qi
发送时间：2020-08-19 14:35:15.142000+00:00
邮件内容:
Hi，粤总：
请帮忙毓杰邮件确认该问题的分析结果，谢谢

====第21封邮件====

发件人：liyue@sdc.icbc.com.cn
发送时间：2020-08-19 14:59:20.062000+00:00
邮件内容:
已了解，多谢李工，我们会联系TMS厂商进行确认，感谢支持。 
李粤
工行软件开发中心
TEL：0756-3395361(长响转手机)

====第22封邮件====

发件人：Bin Hua
发送时间：2020-08-19 16:51:52.751000+00:00
邮件内容:
Hi 李琦，
8月18号的蓝屏dump MEMORY-copy，问题原因和之前相同,都是pTOS数据异常引起的蓝屏重启。
了解到vwifimf.sys是TMS的无线组件，建议TMS厂商进一步排查。
Dump分析：
Bugcheck 0x1e， 系统发现了pagefault抛出异常
KMODE_EXCEPTION_NOT_HANDLED (1e)
This is a very common bugcheck.  Usually the exception address pinpoints
the driver/function that caused the problem.  Always note this address
as well as the link date of the driver/image that contains this address.
Arguments:
Arg1: ffffffff80000003, The exception code that was not handled
Arg2: fffff801404e6235, The address that the exception occurred at
Arg3: ffff840132bde868, Parameter 0 of the exception
Arg4: ffff840132bde0b0, Parameter 1 of the exception
2: kd> .trap 0xffff840132bdfb50
NOTE: The trap frame does not contain all registers.
Some register values may be zeroed or incorrect.
rax=0000003200360035 rbx=0000000000000000 rcx=ffffda8acc2ec2c0
rdx=0000000000000000 rsi=0000000000000000 rdi=0000000000000000
rip=0000003200360035 rsp=ffff840132bdfce8 rbp=0000000000000000
r8=4c46444e02156700  r9=ec770c55eb0493df r10=ffffda8acc232320
r11=0000000000000001 r12=0000000000000000 r13=0000000000000000
r14=0000000000000000 r15=0000000000000000
iopl=0         nv up ei pl nz na pe nc
00000032`00360035 ??              ???
2: kd> !mex.t 
Process                   Thread           CID       UserTime KernelTime ContextSwitches Wait Reason Time State
System (ffffda8ac4a63200) ffffda8ac6402080 4.d0            0s     8s.828           59916 Executive     0s Running on CPU 2
 # Child-SP         Return           Call Site                                   Info                         
 0 ffff840132bdd808 fffff80140745107 nt!KeBugCheckEx+0x0                                                      
 1 ffff840132bdd810 fffff801406841b6 nt!KiFatalFilter+0x1f                                                    
 2 ffff840132bdd850 fffff8014064554f nt!KeExpandKernelStackAndCalloutInternal$filt$0+0x16                     
 3 ffff840132bdd890 fffff80140673b5f nt!__C_specific_handler+0x9f                                             
 4 ffff840132bdd900 fffff801405cc450 nt!RtlpExecuteHandlerForException+0xf                                    
 5 ffff840132bdd930 fffff801404d9c24 nt!RtlDispatchException+0x430                                            
 6 ffff840132bde080 fffff8014067c9c2 nt!KiDispatchException+0x144                                             
 7 ffff840132bde730 fffff80140676681 nt!KiExceptionDispatch+0xc2                                              
 8 ffff840132bde910 fffff801404e6236 nt!KiBreakpointTrap+0x301                   TrapFrame @ ffff840132bde910 
 9 ffff840132bdeaa0 fffff801406454eb nt!KeCheckStackAndTargetAddress+0x46                                     
 a ffff840132bdead0 fffff80140673b5f nt!__C_specific_handler+0x3b                                             
 b ffff840132bdeb40 fffff801405cc450 nt!RtlpExecuteHandlerForException+0xf                                    
 c ffff840132bdeb70 fffff801404d9c24 nt!RtlDispatchException+0x430                                            
 d ffff840132bdf2c0 fffff8014067c9c2 nt!KiDispatchException+0x144                                             
 e ffff840132bdf970 fffff80140678cae nt!KiExceptionDispatch+0xc2                                              
 f ffff840132bdfb50 0000003200360035 nt!KiPageFault+0x42e                        TrapFrame @ ffff840132bdfb50 
10 ffff840132bdfce8 fffff8013ed59513 0x3200360035  
11 ffff840132bdfcf0 fffff8013ed5d66d nwifi!Dot11SendCompletion+0x4b                                           
12 ffff840132bdfd30 fffff80143b766a3 nwifi!Pt6SendComplete+0x1d                                               
13 ffff840132bdfd60 fffff80143b784ce ndis!ndisCallSendCompleteHandler+0x33                                    
14 ffff840132bdfda0 fffff80140597a78 ndis!ndisDataPathExpandStackCallback+0x3e                             
*	内存空间0x00000032`00360035存放的是数据体pTOS的参数pRoutine, pTOS是由三方迷你网卡过滤驱动（mini-port filter driver）vwifimf.sys 维护的。
2: kd> !mex.ddt -n pTOS
dt -n pTOS  () Recursive: [ -r1 -r2 -r ] Verbose dx Normal dt
=
Local var @ rbx Type DOT11_COMPLETION_STACK_ENTRY*
   +0x000 pRoutine                 : 0x00000032`00360035 Void    [ !ndao dps dc !handle ln ? ]
   +0x008 pCtxt                    : 0x4c46444e`02156700 Void    [ !ndao dps dc !handle ln ? ]
   +0x010 pCtxt2                   : 0xec770c55`eb0493df Void    [ !ndao dps dc !handle ln ? ]
华斌
Support Escalation Eng | Microsoft China Co Ltd | +86 (510) 66657739 | bihua@microsoft.com <mailto:bihua@microsoft.com> 

====第23封邮件====

发件人：Li Qi
发送时间：2020-08-24 10:29:18.032000+00:00
邮件内容:
Hi，Hua Bin：
此case已与用户沟通，可以暂时归档，谢谢

====第24封邮件====

发件人：Bin Hua
发送时间：2020-08-24 17:55:22.371000+00:00
邮件内容:
Hi 李琦，
感谢确认，接下来我将暂时归档本案，如果后续您还有相关问题需要协助，欢迎再次电话或者邮件与我们沟通，我可以重启case来协助您跟踪问题。
华斌
Support Escalation Eng | Microsoft China Co Ltd | +86 (510) 66657739 | bihua@microsoft.com <mailto:bihua@microsoft.com> 

====第25封邮件====

发件人：Bin Hua
发送时间：2020-08-28 19:48:28.922000+00:00
邮件内容:
Hi李经理，
以下是基于memory-copy.dmp的详细分析，供两位参考。
其中的dump分析使用的均是原生命令，除了一个mex.tag用于根据pool tag找驱动名称。
如客户没有安装mex，可以通过如下方法来找驱动名称: ：https://support.microsoft.com/en-sg/help/298102/how-to-find-pool-tags-that-are-used-by-third-party-drivers
Dump分析：
-          bugcheck 1e是由于异常(exception)引起的蓝屏重启。触发异常的类型在arg 1 0x80000003(STATUS_BREAKPOINT)
参考连接：
Analyze命令 ：https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/using-the--analyze-extension
Bugcheck 1e：https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/bug-check-0x1e--kmode-exception-not-handled
2: kd> !analyze -v
*******************************************************************************
*                                                                             *
*                        Bugcheck Analysis                                    *
*                                                                             *
*******************************************************************************
KMODE_EXCEPTION_NOT_HANDLED (1e)
This is a very common bugcheck.  Usually the exception address pinpoints
the driver/function that caused the problem.  Always note this address
as well as the link date of the driver/image that contains this address.
Arguments:
Arg1: ffffffff80000003, The exception code that was not handled
Arg2: fffff801404e6235, The address that the exception occurred at
Arg3: ffff840132bde868, Parameter 0 of the exception
Arg4: ffff840132bde0b0, Parameter 1 of the exception
-          打出call stack，在第0x10帧出现了地址0x3200360035 
参考连接：
k命令：https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/k--kb--kc--kd--kp--kp--kv--display-stack-backtrace-
2: kd> k
 # Child-SP          RetAddr               Call Site                                            
00 ffff8401`32bdd808 fffff801`40745107     nt!KeBugCheckEx+0x0 
01 ffff8401`32bdd810 fffff801`406841b6     nt!KiFatalFilter+0x1f 
02 ffff8401`32bdd850 fffff801`4064554f     nt!KeExpandKernelStackAndCalloutInternal$filt$0+0x16
03 ffff8401`32bdd890 fffff801`40673b5f     nt!__C_specific_handler+0x9f 
04 ffff8401`32bdd900 fffff801`405cc450     nt!RtlpExecuteHandlerForException+0xf
05 ffff8401`32bdd930 fffff801`404d9c24     nt!RtlDispatchException+0x430 
06 ffff8401`32bde080 fffff801`4067c9c2     nt!KiDispatchException+0x144 
07 ffff8401`32bde730 fffff801`40676681     nt!KiExceptionDispatch+0xc2 
08 ffff8401`32bde910 fffff801`404e6236     nt!KiBreakpointTrap+0x301                            
09 ffff8401`32bdeaa0 fffff801`406454eb     nt!KeCheckStackAndTargetAddress+0x46
0a ffff8401`32bdead0 fffff801`40673b5f     nt!__C_specific_handler+0x3b 
0b ffff8401`32bdeb40 fffff801`405cc450     nt!RtlpExecuteHandlerForException+0xf
0c ffff8401`32bdeb70 fffff801`404d9c24     nt!RtlDispatchException+0x430 
0d ffff8401`32bdf2c0 fffff801`4067c9c2     nt!KiDispatchException+0x144 
0e ffff8401`32bdf970 fffff801`40678cae     nt!KiExceptionDispatch+0xc2 
0f ffff8401`32bdfb50 00000032`00360035     nt!KiPageFault+0x42e                                 
10 ffff8401`32bdfce8 fffff801`3ed59513     0x3200360035 
11 ffff8401`32bdfcf0 fffff801`3ed5d66d     nwifi!Dot11SendCompletion+0x4b 
12 ffff8401`32bdfd30 fffff801`43b766a3     nwifi!Pt6SendComplete+0x1d 
13 ffff8401`32bdfd60 fffff801`43b784ce     ndis!ndisCallSendCompleteHandler+0x33
14 ffff8401`32bdfda0 fffff801`40597a78     ndis!ndisDataPathExpandStackCallback+0x3e
15 ffff8401`32bdfdf0 fffff801`405979ed     nt!KeExpandKernelStackAndCalloutInternal+0x78
16 ffff8401`32bdfe60 fffff801`43b9e104     nt!KeExpandKernelStackAndCalloutEx+0x1d
17 (Inline Function) --------`--------     ndis!ndisExpandStack+0x65 
18 (Inline Function) --------`--------     ndis!ndisExpandDataPathStack+0x65
19 (Inline Function) --------`--------     ndis!ndisInvokeNextSendCompleteHandler+0x28ba1
1a ffff8401`32bdfea0 fffff801`44641f92     ndis!NdisFSendNetBufferListsComplete+0x28dc4
1b ffff8401`32bdff90 fffff801`43b766a3     vwifimf+0x1f92 
1c ffff8401`32bdffe0 fffff801`43b784ce     ndis!ndisCallSendCompleteHandler+0x33
1d ffff8401`32be0020 fffff801`40597a78     ndis!ndisDataPathExpandStackCallback+0x3e
1e ffff8401`32be0070 fffff801`405979ed     nt!KeExpandKernelStackAndCalloutInternal+0x78
1f ffff8401`32be00e0 fffff801`43b9e104     nt!KeExpandKernelStackAndCalloutEx+0x1d
20 (Inline Function) --------`--------     ndis!ndisExpandStack+0x65 
-          进入到第0x10和0x11帧查看，发现rax= 0000003200360035，rbx= ffffda8ad44db938
2: kd> .frame /r 0x10
10 ffff8401`32bdfce8 fffff801`3ed59513     0x00000032`00360035
rax=0000003200360035 rbx=ffffda8ad44db938 rcx=ffffda8acc2ec2c0
rdx=0000000000000000 rsi=ffffda8acc2ec2c0 rdi=ffffda8acdf28a30
rip=0000003200360035 rsp=ffff840132bdfce8 rbp=0000000000000000
r8=4c46444e02156700  r9=ec770c55eb0493df r10=ffffda8acc232320
r11=0000000000000001 r12=0000000000000000 r13=0000000000000004
r14=fffff80143b78490 r15=0000000000000000
iopl=0         nv up ei ng nz na pe nc
cs=0010  ss=0018  ds=002b  es=002b  fs=0053  gs=002b             efl=00000282
00000032`00360035 ??              ???
2: kd> .frame /r 0x11
11 ffff8401`32bdfcf0 fffff801`3ed5d66d     nwifi!Dot11SendCompletion+0x4b
rax=0000003200360035 rbx=ffffda8ad44db938 rcx=ffffda8acc2ec2c0
rdx=0000000000000000 rsi=ffffda8acc2ec2c0 rdi=ffffda8acdf28a30
rip=fffff8013ed59513 rsp=ffff840132bdfcf0 rbp=0000000000000000
r8=4c46444e02156700  r9=ec770c55eb0493df r10=ffffda8acc232320
r11=0000000000000001 r12=0000000000000000 r13=0000000000000004
r14=fffff80143b78490 r15=0000000000000000
iopl=0         nv up ei ng nz na pe nc
cs=0010  ss=0018  ds=002b  es=002b  fs=0053  gs=002b             efl=00000282
nwifi!Dot11SendCompletion+0x4b:
fffff801`3ed59513 4883eb18        sub     rbx,18h
-          查看第0x11帧的本地变量，其中pTOS的值存储在寄存器rbx中
dv命令：https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/dv--display-local-variables-
2: kd> dv
    pNdisPacket = 0xffffda8a`cc2ec2c0
     ndisStatus = 0n0
           pBOS = 0xffffda8a`cdf28a30
           pTOS = 0xffffda8a`d44db938
-          通过Windows代码，我们知道pTOS的数据类型是nwifi!DOT11_COMPLETION_STACK_ENTRY，打出pTOS的内部结构，pTOS其中的一个字段pRoutine的地址是导致异常的0x00000032`00360035，说明是pTOS的内容异常引起了蓝屏
dt命令：https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/dt--display-type-
2: kd> dt ffffda8ad44db938 nwifi!DOT11_COMPLETION_STACK_ENTRY
   +0x000 pRoutine         : 0x00000032`00360035 Void
   +0x008 pCtxt            : 0x4c46444e`02156700 Void
   +0x010 pCtxt2           : 0xec770c55`eb0493df Void
-          通过pool 和tag命令，找到了这个NBL包内存地址是由vwifimf.sys驱动申请和维护的。经客户确认，vwifimf.sys是由三方软件TMS开发的驱动。
Pool命令：https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/-pool
通过pool tag找三方驱动的方法：https://support.microsoft.com/en-sg/help/298102/how-to-find-pool-tags-that-are-used-by-third-party-drivers
2: kd> dt ffffda8acc2ec2c0 nwifi!_NET_BUFFER_LIST
   +0x000 Next             : (null) 
   +0x008 FirstNetBuffer   : 0xffffda8a`cc2ec440 _NET_BUFFER
   +0x000 Link             : _SLIST_HEADER
   +0x000 NetBufferListHeader : _NET_BUFFER_LIST_HEADER
   +0x010 Context          : 0xffffda8a`cdf289f0 _NET_BUFFER_LIST_CONTEXT
   +0x018 ParentNetBufferList : (null) 
   +0x020 NdisPoolHandle   : 0xffffda8a`c4ad8680 Void
   +0x030 NdisReserved     : [2] (null) 
   +0x040 ProtocolReserved : [4] 0xffffda8a`d49982e0 Void
   +0x060 MiniportReserved : [2] (null) 
   +0x070 Scratch          : (null) 
   +0x078 SourceHandle     : 0xffffda8a`c4ad2660 Void
   +0x080 NblFlags         : 0
   +0x084 ChildRefCount    : 0n0
   +0x088 Flags            : 0x500
   +0x08c Status           : 0n0
   +0x08c NdisReserved2    : 0
   +0x090 NetBufferListInfo : [26] (null) 
2: kd> !pool 0xffffda8ac4ad8680 2
Pool page ffffda8ac4ad8680 region is Nonpaged pool
*ffffda8ac4ad8650 size:  600 previous size:    0  (Allocated) *Filt
                 Owning component : Unknown (update pooltag.txt)
2: kd> !mex.tag Filt
Name    Number of Hits Version Time Stamp          Location
======= ============== ======= =================== ========================================
vwifimf              1 0.0.0.0 06/23/2020 03:10:42 \SystemRoot\system32\DRIVERS\vwifimf.sys
Hits
============================================
fffff801`44641790  41 b8 46 69 6c 74 03 d1-0f b7 08 8d 94 0a 08 01  A.Filt..........
Best regards,
Bin Hua

====第26封邮件====

发件人：Bin Hua
发送时间：2020-08-28 20:53:24.732000+00:00
邮件内容:
Hi 李经理，李琦
如电话沟通，您暂时没有进一步需要解释的问题了。我会把案件等级设置为B，如需进一步协助，请与我联系。
BRs/Bin
________________________________

====第27封邮件====

发件人：Li Qi
发送时间：2020-09-15 15:48:29.352000+00:00
邮件内容:
Hi，华工：
这个case暂时不需要后续跟进，暂时可以关了。感谢支持。

====第28封邮件====

发件人：Bin Hua
发送时间：2020-09-15 15:57:09.540000+00:00
邮件内容:
Hi 李经理，李琦
感谢反馈，经过您的确认，接下来我将临时归档本案，如果后续您还有相关问题需要协助，欢迎再次电话或者邮件与我们沟通，我可以重启case来协助您跟踪问题。
华斌
Support Escalation Eng | Microsoft China Co Ltd | +86 (510) 66657739 | bihua@microsoft.com <mailto:bihua@microsoft.com> 
